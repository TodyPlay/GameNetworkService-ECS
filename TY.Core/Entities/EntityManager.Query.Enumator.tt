<#@ template language="C#"#>
<#@ import namespace="System.Linq" #>
using System.Collections;
using TY.Collections;
using TY.Components;
using TY.Unmanaged;

namespace TY.Entities;

<#
    const int SIZE = 8;
#>
<#
    for (int i = 1; i <= SIZE; i++)
    {
        var generic = string.Join(", ", (new int[i].Select(((_, index) => $"T{index + 1}"))).ToArray());
        var refGeneric = i == 1
            ? "Ref<T1>"
            : "(" + string.Join(", ", (new int[i].Select(((_, index) => $"Ref<T{index + 1}>"))).ToArray()) + ")";
#>

public struct Enumerable<<#= generic #>> : IEnumerable<<#= refGeneric #>>
<#
        for (int j = 1; j <= i; j++)
        {
#>
    where <#= "T" + j #> : unmanaged, IComponentData
<#
        }
#>
{
    public unsafe UnsafePtrList<Archetype>* matchingTypes;

    public Enumerator<<#= generic #>> GetEnumerator()
    {
        unsafe
        {
            return new Enumerator<<#= generic #>>()
                { entityIndex = -1, archetypeIndex = 0, matchingTypes = this.matchingTypes };
        }
    }

    IEnumerator<<#= refGeneric #>> IEnumerable<<#= refGeneric #>>.GetEnumerator()
    {
        return GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}

public struct Enumerator<<#= generic #>> : IEnumerator<<#= refGeneric #>>
<#
        for (int j = 1; j <= i; j++)
        {
#>
    where <#= "T" + j #> : unmanaged, IComponentData
<#
        }
#>
{
    public int entityIndex;

    public int archetypeIndex;

    public unsafe UnsafePtrList<Archetype>* matchingTypes;

    public bool MoveNext()
    {
        unsafe
        {
            if (matchingTypes->Length == 0)
            {
                return false;
            }

            if (entityIndex + 1 < (*matchingTypes)[archetypeIndex]->EntityCount)
            {
                entityIndex++;
                return true;
            }

            if (archetypeIndex + 1 < (*matchingTypes).Length)
            {
                entityIndex = 0;
                archetypeIndex++;
                return true;
            }

            return false;
        }
    }

    public void Reset()
    {
        entityIndex = default;
    }

    public <#= refGeneric #> Current
    {
        get
        {
            unsafe
            {
                return (
<#
        for (int j = 1; j <= i; j++)
        {
#>
                    (*matchingTypes)[archetypeIndex]->ResolvComponent<<#= $"T{j}" #>>(entityIndex)<#= i == j ? "" : "," #>
<#
        }
#>
                );
            }
        }
    }

    object IEnumerator.Current => Current;

    public void Dispose()
    {
    }
}
<#
    }
#>