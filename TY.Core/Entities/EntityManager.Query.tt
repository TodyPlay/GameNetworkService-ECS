<#@ template language="C#"#>
<#@ import namespace="System.Linq" #>
using TY.Components;
using TY.Unmanaged;

namespace TY.Entities;
<#
    const int SIZE = 8;
#>

public partial struct EntityManager
{
<#
    for (int i = 1; i <= SIZE; i++)
    {
        var generic = string.Join(", ", (new int[i].Select(((_, index) => $"T{index + 1}"))).ToArray());
#>

    public Enumerable<<#= generic #>> Query<<#= generic #>>()
<#
        for (int j = 1; j <= i; j++)
        {
#>
        where <#= "T" + j #> : unmanaged, IComponentData
<#
        }
#>
    {
        unsafe
        {
            ComponentType* types = stackalloc ComponentType[<#= i #>];
<#
        for (int j = 1; j <= i; j++)
        {
#>
            types[<#= j - 1 #>] = ComponentType.ReadWrite<<#= "T" + j #>>();
<#
        }
#>
            var entityQuery = Query(types, <#= i #>);
            return new Enumerable<<#= generic #>>() { matchingTypes = entityQuery.matchingTypes };
        }
    }
<#
    }
#>
    

}