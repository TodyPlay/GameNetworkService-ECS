<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
using TY.Components;

namespace TY.Entities;

<#
    const int start = 1;

    const int end = 8;

    const string genericName = "T";

    string Generics(int count)
    {
        var builder = new StringBuilder();
        for (var i = 1; i <= count; i++)
        {
            builder.Append(genericName).Append(i);
            if (i < count)
            {
                builder.Append(", ");
            }
        }

        return builder.ToString();
    }
#>
public partial struct EntityManager
{
<#
    string Wheres(int count)
    {
        var sb = new StringBuilder();
        for (int i = 1; i <= count; i++)
        {
            sb.Append("        ").Append($"where T{i} : unmanaged, IQueryTypeParameter");

            if (i != count)
            {
                sb.AppendLine();
            }
        }

        return sb.ToString();
    }

    for (var i = start; i < end; i++)
    {
        Write(i == 1
            ? $@"    public IEnumerable<{Generics(i)}> Query<{Generics(i)}>()
{Wheres(i)}
"
            : $@"    public IEnumerable<({Generics(i)})> Query<{Generics(i)}>()
{Wheres(i)}
");
        WriteLine(@$"    {{
        throw new NotImplementedException();
    }}
");
    }
#>
}